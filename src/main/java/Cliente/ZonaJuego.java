/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package Cliente;

import Mapas.Mapas;
import Mapas.cargarMapas;
import Personajes.Jugador;
import Modelos.Mensaje;
import Modelos.TipoMensaje;
import Sonidos.ReproductorAudio;
import java.awt.Dimension;
import java.awt.event.KeyEvent; // << NUEVO
import java.awt.event.KeyListener; // << NUEVO
import java.io.IOException;
import java.io.ObjectInputStream;
import java.io.ObjectOutputStream;
import java.util.ArrayList;
import java.util.List;
import javax.swing.SwingUtilities;

/**
 *
 * @author jos_m
 */
public class ZonaJuego extends javax.swing.JFrame implements ReceptorMensajes, KeyListener { // << MODIFICADO
    private String nombreJugador;
    private ReproductorAudio reproductor = new ReproductorAudio();
    private ObjectOutputStream salida;
    private ObjectInputStream entrada;
    private List<Jugador> jugadores = new ArrayList<>();
    private Mapas panelMapaActual; // << NUEVO: Referencia al panel del mapa
    private char[][] definicionMapa; // << NUEVO: Para recargar el mapa base

    /**
     * Creates new form ZonaJuego
     */
    public ZonaJuego() {
        initComponents();
        reproductor.reproducir("/Sonidos/musica.wav");
        txtSms.setEditable(false);

        // Para eventos de teclado
        this.addKeyListener(this);
        this.setFocusable(true);   
        this.requestFocusInWindow(); 
    }
    
    public void cargarPanelMapa() {
        definicionMapa = cargarMapas.cargarMapaDesdeArchivo("mapa1.txt"); 
        panelMapaActual = new Mapas(definicionMapa);

        Dimension dim = panelMapaActual.getPreferredSize();
        jPanel1.setLayout(null);
        jPanel1.setPreferredSize(dim);
        jPanel1.setSize(dim);

        panelMapaActual.setBounds(0, 0, dim.width, dim.height);
        // panelMapaActual.setBorder(javax.swing.BorderFactory.createLineBorder(java.awt.Color.RED, 2)); 

        jPanel1.removeAll();
        jPanel1.add(panelMapaActual);
        jPanel1.revalidate();
        jPanel1.repaint();
    }
    
    public void setJugadores(List<Jugador> jugadores) {
        this.jugadores = jugadores;
       
        SwingUtilities.invokeLater(this::repaintMapa);
    }

    public void repaintMapa() {
        if (panelMapaActual == null) { 
            cargarPanelMapa(); // Esto crea panelMapaActual
        }

        panelMapaActual = new Mapas(definicionMapa); 
        panelMapaActual.setJugadores(this.jugadores); 

        Dimension dim = panelMapaActual.getPreferredSize();
        panelMapaActual.setBounds(0, 0, dim.width, dim.height);
        
        jPanel1.removeAll();
        jPanel1.add(panelMapaActual);
        jPanel1.revalidate();
        jPanel1.repaint();
        
        System.out.println("âœ… Mapa repintado con " + jugadores.size() + " jugadores.");

        this.requestFocusInWindow(); 
    }


    
    public void initData(String nombreJugador, ObjectOutputStream salida, ObjectInputStream entrada) {
        this.nombreJugador = nombreJugador;
        this.salida = salida;
        this.entrada = entrada;

        setTitle("Zona de juego de " + nombreJugador);

        cargarPanelMapa();  
        pack();              
        setLocationRelativeTo(null); 
        setVisible(true);
        this.requestFocusInWindow(); 
    }
    
    @Override 
    public void dispose() {
        reproductor.detener(); 
        super.dispose();       
    }
    
    public void actualizarListaJugadores(List<String> jugadoresNombres) {
        System.out.println("ðŸŽ¯ RecibÃ­ jugadores para ComboBox: " + jugadoresNombres);
        comboElegir.removeAllItems();
        comboElegir.addItem("ALL"); 

        for (String jugadorNombre : jugadoresNombres) {
            if (!jugadorNombre.equals(nombreJugador)) {
                comboElegir.addItem(jugadorNombre);
            }
        }
    }

  
    public void actualizarPosicionesJugadores(List<Jugador> nuevosJugadores) {
        this.jugadores = nuevosJugadores;
        SwingUtilities.invokeLater(this::repaintMapa);
    }


    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLayeredPane1 = new javax.swing.JLayeredPane();
        jPanel1 = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        txtSms = new javax.swing.JTextArea();
        btnEnviarPublico = new javax.swing.JButton();
        txtPublico = new javax.swing.JTextField();
        comboElegir = new javax.swing.JComboBox<>();
        btnEnviarPrivado = new javax.swing.JButton();
        txtPrivado = new javax.swing.JTextField();
        btnSalir = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                formKeyPressed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 344, Short.MAX_VALUE)
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 313, Short.MAX_VALUE)
        );

        txtSms.setColumns(20);
        txtSms.setRows(5);
        jScrollPane1.setViewportView(txtSms);

        btnEnviarPublico.setText("Enviar Mensaje PÃºblico");
        btnEnviarPublico.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnEnviarPublicoActionPerformed(evt);
            }
        });

        comboElegir.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));
        comboElegir.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                comboElegirActionPerformed(evt);
            }
        });

        btnEnviarPrivado.setText("Enviar Mensaje Privado");
        btnEnviarPrivado.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnEnviarPrivadoActionPerformed(evt);
            }
        });

        btnSalir.setText("Salir");
        btnSalir.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSalirActionPerformed(evt);
            }
        });

        jLayeredPane1.setLayer(jPanel1, javax.swing.JLayeredPane.DEFAULT_LAYER);
        jLayeredPane1.setLayer(jScrollPane1, javax.swing.JLayeredPane.DEFAULT_LAYER);
        jLayeredPane1.setLayer(btnEnviarPublico, javax.swing.JLayeredPane.DEFAULT_LAYER);
        jLayeredPane1.setLayer(txtPublico, javax.swing.JLayeredPane.DEFAULT_LAYER);
        jLayeredPane1.setLayer(comboElegir, javax.swing.JLayeredPane.DEFAULT_LAYER);
        jLayeredPane1.setLayer(btnEnviarPrivado, javax.swing.JLayeredPane.DEFAULT_LAYER);
        jLayeredPane1.setLayer(txtPrivado, javax.swing.JLayeredPane.DEFAULT_LAYER);
        jLayeredPane1.setLayer(btnSalir, javax.swing.JLayeredPane.DEFAULT_LAYER);

        javax.swing.GroupLayout jLayeredPane1Layout = new javax.swing.GroupLayout(jLayeredPane1);
        jLayeredPane1.setLayout(jLayeredPane1Layout);
        jLayeredPane1Layout.setHorizontalGroup(
            jLayeredPane1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jLayeredPane1Layout.createSequentialGroup()
                .addGap(66, 66, 66)
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jLayeredPane1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(jLayeredPane1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                        .addComponent(comboElegir, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(btnEnviarPrivado, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(txtPrivado))
                    .addGroup(jLayeredPane1Layout.createSequentialGroup()
                        .addComponent(btnSalir)
                        .addGap(80, 80, 80)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 18, Short.MAX_VALUE)
                .addGroup(jLayeredPane1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jLayeredPane1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                        .addComponent(jScrollPane1)
                        .addComponent(txtPublico))
                    .addComponent(btnEnviarPublico))
                .addGap(25, 25, 25))
        );
        jLayeredPane1Layout.setVerticalGroup(
            jLayeredPane1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jLayeredPane1Layout.createSequentialGroup()
                .addGap(37, 37, 37)
                .addGroup(jLayeredPane1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(jLayeredPane1Layout.createSequentialGroup()
                        .addGroup(jLayeredPane1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jLayeredPane1Layout.createSequentialGroup()
                                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 220, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(33, 33, 33))
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jLayeredPane1Layout.createSequentialGroup()
                                .addComponent(btnSalir)
                                .addGap(18, 18, 18)
                                .addComponent(comboElegir, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(15, 15, 15)))
                        .addGroup(jLayeredPane1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(txtPrivado, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(txtPublico, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(19, 19, 19)
                        .addGroup(jLayeredPane1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(btnEnviarPrivado)
                            .addComponent(btnEnviarPublico))))
                .addContainerGap(46, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jLayeredPane1)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jLayeredPane1)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void btnEnviarPublicoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnEnviarPublicoActionPerformed
        String texto = txtPublico.getText().trim();
        if (!texto.isBlank()) {
            try {
                Mensaje mensaje = new Mensaje(nombreJugador, texto, "ALL", TipoMensaje.PUBLICO);
                salida.writeObject(mensaje);
                txtSms.append(nombreJugador + ": " + texto + "\n");
                txtPublico.setText("");
            } catch (IOException e) {
                txtSms.append("[Error] No se pudo enviar el mensaje pÃºblico\n");
            }
        }
        this.requestFocusInWindow(); // Devolver foco
    }//GEN-LAST:event_btnEnviarPublicoActionPerformed

    private void btnEnviarPrivadoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnEnviarPrivadoActionPerformed
        String texto = txtPrivado.getText().trim();
        String receptor = comboElegir.getSelectedItem().toString();

        if (!texto.isBlank() && receptor != null) {
            try {
                TipoMensaje tipo = receptor.equals("ALL") ? TipoMensaje.PUBLICO : TipoMensaje.PRIVADO;
                Mensaje mensaje = new Mensaje(nombreJugador, texto, receptor, tipo);
                salida.writeObject(mensaje);

                if (tipo == TipoMensaje.PRIVADO) {
                    txtSms.append("[Privado a " + receptor + "] " + texto + "\n");
                } else {
                    txtSms.append(nombreJugador + ": " + texto + "\n");
                }
                txtPrivado.setText("");
            } catch (IOException e) {
                txtSms.append("[Error] No se pudo enviar el mensaje privado\n");
            }
        }
        this.requestFocusInWindow(); // Devolver foco
    }//GEN-LAST:event_btnEnviarPrivadoActionPerformed

    private void comboElegirActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_comboElegirActionPerformed
        this.requestFocusInWindow(); // Devolver foco
    }//GEN-LAST:event_comboElegirActionPerformed


    private void formKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_formKeyPressed
  
        keyPressed(evt); 
    }//GEN-LAST:event_formKeyPressed

    private void btnSalirActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSalirActionPerformed

        this.dispose(); 

    }//GEN-LAST:event_btnSalirActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(ZonaJuego.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(ZonaJuego.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(ZonaJuego.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(ZonaJuego.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new ZonaJuego().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnEnviarPrivado;
    private javax.swing.JButton btnEnviarPublico;
    private javax.swing.JButton btnSalir;
    private javax.swing.JComboBox<String> comboElegir;
    private javax.swing.JLayeredPane jLayeredPane1;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTextField txtPrivado;
    private javax.swing.JTextField txtPublico;
    private javax.swing.JTextArea txtSms;
    // End of variables declaration//GEN-END:variables

    @Override
    public void recibirMensaje(Mensaje mensaje) {
        
        SwingUtilities.invokeLater(() -> {
            if (mensaje.getTipo() == TipoMensaje.PUBLICO || mensaje.getTipo() == TipoMensaje.PRIVADO) {
                txtSms.append(mensaje.getEnviador() + ": " + mensaje.getContenido().toString() + "\n");
            } else {

                 txtSms.append("[INFO] " + mensaje.toString() + "\n");
            }
        });
    }
    
    // --- MÃ©todos KeyListener ---
    @Override
    public void keyTyped(KeyEvent e) {

    }

    @Override
    public void keyPressed(KeyEvent e) {
        if (salida == null) return; 

        String direccion = null;
        switch (e.getKeyCode()) {
            case KeyEvent.VK_UP:    direccion = "UP";    break;
            case KeyEvent.VK_DOWN:  direccion = "DOWN";  break;
            case KeyEvent.VK_LEFT:  direccion = "LEFT";  break;
            case KeyEvent.VK_RIGHT: direccion = "RIGHT"; break;
        }

        if (direccion != null) {
            try {
                System.out.println("Enviando movimiento: " + direccion + " para " + nombreJugador);
                Mensaje msgMovimiento = new Mensaje(nombreJugador, direccion, "SERVER", TipoMensaje.MOVER);
                salida.writeObject(msgMovimiento);
                salida.flush(); 
            } catch (IOException ex) {
                txtSms.append("[Error] No se pudo enviar el movimiento: " + ex.getMessage() + "\n");
                ex.printStackTrace();
            }
        }
    }

    @Override
    public void keyReleased(KeyEvent e) {
       
    }
}